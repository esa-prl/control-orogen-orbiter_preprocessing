name 'orbiter_preprocessing'

using_library 'pcl_common-1.7'
using_library 'pcl_filters-1.7'
using_library 'pcl_io-1.7'

import_types_from 'base'

task_context 'Task' do
    needs_configuration

    ####### Properties #######
    property('loadFilename', '/std/string').
        doc 'Path to filename (PCD or PLY) of the stored point cloud'

    property('saveFilename', '/std/string').
        doc 'Path to filename (PCD or PLY) of the point cloud to be stored'

    property('savePreprocessedCloud', 'bool', false).
        doc 'Save the preprocessed cloud in a file'

    property('preprocessingEnabled', 'bool', true).
        doc 'Preprocess the loaded cloud before outputting it'

    property('smoothCloud', 'bool', true).
        doc 'Smooth cloud using a statistical outlier removal (SOR) filter'

    property('sorMeanK', 'int', 50).
        doc 'Number of neighbors to analyze for each point in SOR filter'

    property('sorStdMultiplier', 'double', 1.0).
        doc 'Standard deviation multiplier for marking outliers in SOR filter'

    property('cloudYawOffset', 'double', -Math::PI/2).
        doc 'Yaw offset of input point cloud'

    property('cloudEastingOffset', 'double').
        doc 'UTM easting offset of input point cloud'

    property('cloudNorthingOffset', 'double').
        doc 'UTM northing offset of input point cloud'

    property('cloudElevationOffset', 'double').
        doc 'UTM elevation offset of input point cloud'

    property('robotEastingOffset', 'double').
        doc 'UTM easting offset of robot'

    property('robotNorthingOffset', 'double').
        doc 'UTM northing offset of robot'

    property('robotElevationOffset', 'double').
        doc 'UTM elevation offset of robot'

    property('cropSize', 'double').
        doc 'Size of the crop box to be applied'

    property('voxelSize', 'double').
        doc 'Voxel dimension of the voxel grid to be applied'

    property('diffDistanceRatio', 'double', 0.5).
        doc 'Ratio of the distance to voxel grid edge (cropSize / 2) ' +
            'the robot must cover before a new cloud is processed'

    ####### Input Ports #######
    input_port('robotPose', '/base/samples/RigidBodyState').
        doc '6D pose of the robot, either directly from robot or from GPS'

    ####### Output Ports #######
    output_port('pointCloud', '/base/samples/Pointcloud').
        doc 'Point cloud that was loaded and preprocessed'

    periodic 0.5
end

